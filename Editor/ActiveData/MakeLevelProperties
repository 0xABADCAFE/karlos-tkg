#!/usr/bin/php
<?php

declare(strict_types=1);


class LevelPropertiesBuilder {

    private string $sSourcePath;
    private string $sTargetPath;

    public function __construct(string $sSource, string $sTarget) {
        $this->assertSourceReadable($sSource);
        $this->assertTargetWritable($sTarget);
        $this->sSourcePath = $sSource;
        $this->sTargetPath = $sTarget;
    }

    public function build() {
        $oData       = $this->loadSource();
        $sZonePVSErrata = $this->buildZonePVSErrata($oData);
        file_put_contents($this->sTargetPath, $sZonePVSErrata);
    }
   

 
    private function buildZonePVSErrata(stdClass $oData): string {
		$sData = '';

		foreach ($oData->ZonePVSErrata as $iZoneID => $aRemoveZoneIDs) {
			$aRemoveZoneIDs[] = -1;
			$sData .= pack('nn*', $iZoneID, ...$aRemoveZoneIDs);
		}

		$sData .= pack('n', -1);
        return $sData;
    }


    private function loadSource(): stdClass {
        $oData = json_decode(file_get_contents($this->sSourcePath));
        if (empty($oData)) {
            throw new RuntimeException('Unable to load source ' . $this->sSourcePath);
        }

        return $oData;
    }

    private function assertSourceReadable(string $sSource): void {
        if (!is_readable($sSource)) {
            throw new RuntimeException('Source ' . $sSource . ' is not readable');
        }
        if (!is_file($sSource)) {
            throw new RuntimeException('Source ' . $sSource . ' is not a file');
        }
    }

    private function assertTargetWritable(string $sTarget): void {
        if (file_exists($sTarget)) {
            if (!is_file($sTarget)) {
                throw new RuntimeException('Target ' . $sTarget . ' is not a file');
            }
            if (!is_writable($sTarget)) {
                throw new RuntimeException('Target ' . $sTarget . ' is not writable');
            }
        } else {
            $sTargetPath = dirname($sTarget);
            if (!is_writable($sTargetPath)) {
                throw new RuntimeException('Target directory ' . $sTargetPath . ' is not writable');
            }
        }
    }
}

if (!isset($_SERVER['argv'][1])) {
	throw new RuntimeException("No level specified");
}

$sLevel = strtoupper($_SERVER['argv'][1]);

if (!preg_match('/^[A-P]$/', $sLevel)) {
	throw new RuntimeException('Invalid Level ID ' . $sLevel);
}

$sSource = sprintf('Errata/LEVEL_%s.json', $sLevel);
$sTarget = sprintf('../../Game/Levels/LEVEL_%s/errata.dat', $sLevel);
$oBuilder = new LevelPropertiesBuilder(
    $sSource,
    $sTarget
);

$oBuilder->build();

